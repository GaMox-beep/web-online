@model selling_online.Models.ViewModel.CheckoutVM
@{
    ViewBag.Title = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    function enableAddressEdit() {
        document.getElementById("shippingAddress").removeAttribute("readonly");
        document.getElementById("newAddressGroup").style.display = "block"; // Hiện phần địa chỉ mới
    }

    function updateShippingAddress() {
        var newAddress = document.getElementById("newShippingAddress").value; // Lấy địa chỉ mới từ ô nhập
        if (newAddress) {
            document.getElementById("shippingAddress").value = newAddress; // Cập nhật địa chỉ giao hàng
            document.getElementById("shippingAddress").setAttribute("readonly", "readonly"); // Đặt lại ô nhập thành readonly
            document.getElementById("newAddressGroup").style.display = "none"; // Ẩn phần địa chỉ mới
        } else {
            alert("Vui lòng nhập địa chỉ mới."); // Thông báo nếu địa chỉ mới không được nhập
        }
    }
</script>

<style>
    .form-control {
        display: inline-block; /* Để có thể áp dụng vertical-align */
        vertical-align: top; /* Căn giữa theo chiều dọc */
        line-height: 1; /* Điều chỉnh chiều cao dòng nếu cần */
    }

    .checkout-container {
        padding: 30px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin: 20px auto; /* Center the container */
        max-width: 800px; /* Set a max width for better layout */
    }

    .checkout-title {
        font-size: 28px;
        margin-bottom: 20px;
        color: #333;
        text-align: center; /* Center the title */
    }

    .order-info-title, .shipping-info-title {
        font-size: 22px;
        margin-top: 20px;
        color: #555;
        border-bottom: 2px solid #e91e63; /* Add a bottom border for emphasis */
        padding-bottom: 10px; /* Add padding for spacing */
    }

    .order-info {
        margin-bottom: 20px;
    }

    .btn-link {
        color: #007bff;
        text-decoration: underline;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 12px 24px; /* Increase padding for a better button size */
        border-radius: 5px;
        transition: background-color 0.3s;
        width: 100%; /* Make the button full width */
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .form-group {
        display: flex;
        align-items: center; /* Căn giữa theo chiều dọc */
        justify-content: flex-start; /* Căn trái cho nhãn */
        margin-bottom: 15px; /* Khoảng cách giữa các nhóm form */
    }

    .control-label {
        width: 30%; /* Chiều rộng của nhãn */
        text-align: right; /* Căn phải cho nhãn */
        margin-right: 10px; /* Khoảng cách giữa nhãn và trường nhập */
    }

    .col-md-10 {
        width: 70%; /* Chiều rộng của trường nhập */
    }
</style>

<div class="checkout-container">
    <h2 class="checkout-title">ĐẶT HÀNG</h2>
    @using (Html.BeginForm("CheckOut", "Order", FormMethod.Post, new { @class = "form-horizontal checkout-form", role = "form" }))
    {
        @Html.AntiForgeryToken()

        <h3 class="order-info-title">Thông tin đơn hàng</h3>
        <div class="order-info">
            <table class="table">
                <thead>
                    <tr>
                        <th colspan="2">Sản phẩm</th>
                        <th>Số lượng</th>
                        <th>Thành tiền</th>
                        <th>Đơn giá</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.CartItems)
                    {
                        <tr>
                            <td><img style="width: 100px;" src="@item.Image" /></td>
                            <td>@item.ProductName</td>
                            <td>@item.Quantity</td>
                            @using System.Globalization
                            <td>@item.Price.ToString("C", new CultureInfo("vi-VN"))</td>
                            <td>@item.TotalPrice.ToString("C", new CultureInfo("vi-VN"))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h3 class="shipping-info-title">Thông tin giao hàng</h3>
        <div class="form-group">
            @Html.LabelFor(m => m.ShippingAddress, new { @class = "control-label" }) <!-- Nhãn -->
            @Html.TextBoxFor(m => m.ShippingAddress, new
       {
           @class = "form-control",
           @readonly = "readonly",
           @id = "shippingAddress"
       }) <!-- Ô nhập -->
            @Html.ValidationMessageFor(m => m.ShippingAddress) <!-- Thông báo lỗi -->
            <button type="button" class="btn btn-link" onclick="enableAddressEdit()">Chỉnh sửa</button> <!-- Nút chỉnh sửa -->
            <button type="button" class="btn btn-link" onclick="updateAddress()">Cập nhật địa chỉ mới</button> <!-- Nút cập nhật -->
        </div>
        <script>
            function enableAddressEdit() {
                // Bỏ thuộc tính readonly để cho phép người dùng chỉnh sửa địa chỉ
                document.getElementById('shippingAddress').removeAttribute('readonly');
            }

            function updateAddress() {
                // Lấy giá trị địa chỉ mới từ ô nhập liệu
                var newAddress = document.getElementById('shippingAddress').value;
                // Thực hiện logic cập nhật địa chỉ ở đây
                // Ví dụ: gửi yêu cầu AJAX để cập nhật địa chỉ trên server
                console.log("Địa chỉ mới: " + newAddress);

                // Giả sử bạn đã gửi yêu cầu cập nhật thành công, bạn có thể làm mới trang
                // location.reload(); // Bỏ comment dòng này nếu bạn muốn làm mới trang ngay lập tức

                // Nếu bạn muốn làm mới trang sau khi cập nhật thành công, hãy sử dụng một callback hoặc promise
                // Ví dụ:
                // $.ajax({
                //     url: 'your-update-url',
                //     type: 'POST',
                //     data: { shippingAddress: newAddress },
                //     success: function() {
                //         location.reload(); // Làm mới trang sau khi cập nhật thành công
                //     }
                // });

                // Chỉ để kiểm tra, bạn có thể bỏ qua dòng alert này
                alert("Địa chỉ mới đã được cập nhật: " + newAddress);
            }
        </script>

        <div class="form-group">
            @Html.Label("Phương thức giao hàng", new { @class = "control-label" })
            <div class="col-md-10">
                @Html.RadioButtonFor(n => n.ShippingMethod, "Giao hàng nhanh") Giao hàng nhanh<br>
                @Html.RadioButtonFor(m => m.ShippingMethod, "Giao hàng tiết kiệm") Giao hàng tiết kiệm
                @Html.ValidationMessageFor(m => m.ShippingMethod)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Phương thức thanh toán", new { @class = "control-label" })
            <div class="col-md-10">
                @Html.RadioButtonFor(n => n.PaymentMethod, "Tiền mặt") Tiền mặt <br>
                @Html.RadioButtonFor(m => m.PaymentMethod, "Paypal") Paypal<br>
                @Html.RadioButtonFor(m => m.PaymentMethod, "Mua trước trả sau") Mua trước trả sau
                @Html.ValidationMessageFor(m => m.PaymentMethod)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.TotalAmount, new { @class = "control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(m => m.TotalAmount)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-4">
                <input type="submit" value="Đặt hàng" class="btn btn-primary" onclick="updateShippingAddress()" />
            </div>
        </div>
    }
    </div>
